// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_msgs.LaserScan.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto_msgs.LaserScan.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_msg {
class LaserScanDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LaserScan>
     _instance;
} _LaserScan_default_instance_;

namespace protobuf_proto_5fmsgs_2eLaserScan_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, protocol_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, publish_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, frame_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, angle_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, angle_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, angle_increment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, time_increment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, scan_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, range_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, range_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, ranges_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, intensitys_),
  0,
  2,
  1,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, sizeof(LaserScan)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LaserScan_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "proto_msgs.LaserScan.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _LaserScan_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LaserScan_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\032proto_msgs.LaserScan.proto\022\tproto_msg\""
      "\377\001\n\tLaserScan\022\025\n\rprotocol_type\030\001 \002(\t\022\025\n\r"
      "publish_stamp\030\002 \002(\001\022\020\n\010frame_id\030\003 \002(\t\022\021\n"
      "\tangle_min\030\004 \002(\002\022\021\n\tangle_max\030\005 \002(\002\022\027\n\017a"
      "ngle_increment\030\006 \002(\002\022\026\n\016time_increment\030\007"
      " \002(\002\022\021\n\tscan_time\030\010 \002(\002\022\021\n\trange_min\030\t \002"
      "(\002\022\021\n\trange_max\030\n \002(\002\022\016\n\006ranges\030\013 \003(\001\022\022\n"
      "\nintensitys\030\014 \003(\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 297);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto_msgs.LaserScan.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_proto_5fmsgs_2eLaserScan_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaserScan::kProtocolTypeFieldNumber;
const int LaserScan::kPublishStampFieldNumber;
const int LaserScan::kFrameIdFieldNumber;
const int LaserScan::kAngleMinFieldNumber;
const int LaserScan::kAngleMaxFieldNumber;
const int LaserScan::kAngleIncrementFieldNumber;
const int LaserScan::kTimeIncrementFieldNumber;
const int LaserScan::kScanTimeFieldNumber;
const int LaserScan::kRangeMinFieldNumber;
const int LaserScan::kRangeMaxFieldNumber;
const int LaserScan::kRangesFieldNumber;
const int LaserScan::kIntensitysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaserScan::LaserScan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_5fmsgs_2eLaserScan_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_msg.LaserScan)
}
LaserScan::LaserScan(const LaserScan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ranges_(from.ranges_),
      intensitys_(from.intensitys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  protocol_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_protocol_type()) {
    protocol_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_type_);
  }
  frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_frame_id()) {
    frame_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
  }
  ::memcpy(&publish_stamp_, &from.publish_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&range_max_) -
    reinterpret_cast<char*>(&publish_stamp_)) + sizeof(range_max_));
  // @@protoc_insertion_point(copy_constructor:proto_msg.LaserScan)
}

void LaserScan::SharedCtor() {
  _cached_size_ = 0;
  protocol_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&publish_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_max_) -
      reinterpret_cast<char*>(&publish_stamp_)) + sizeof(range_max_));
}

LaserScan::~LaserScan() {
  // @@protoc_insertion_point(destructor:proto_msg.LaserScan)
  SharedDtor();
}

void LaserScan::SharedDtor() {
  protocol_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LaserScan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaserScan::descriptor() {
  protobuf_proto_5fmsgs_2eLaserScan_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_5fmsgs_2eLaserScan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaserScan& LaserScan::default_instance() {
  protobuf_proto_5fmsgs_2eLaserScan_2eproto::InitDefaults();
  return *internal_default_instance();
}

LaserScan* LaserScan::New(::google::protobuf::Arena* arena) const {
  LaserScan* n = new LaserScan;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaserScan::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_msg.LaserScan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ranges_.Clear();
  intensitys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!protocol_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*protocol_type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!frame_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*frame_id_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&publish_stamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scan_time_) -
        reinterpret_cast<char*>(&publish_stamp_)) + sizeof(scan_time_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&range_min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&range_max_) -
        reinterpret_cast<char*>(&range_min_)) + sizeof(range_max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaserScan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_msg.LaserScan)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string protocol_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->protocol_type().data(), static_cast<int>(this->protocol_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto_msg.LaserScan.protocol_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double publish_stamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_publish_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &publish_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string frame_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->frame_id().data(), static_cast<int>(this->frame_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto_msg.LaserScan.frame_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float angle_min = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_angle_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float angle_max = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_angle_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float angle_increment = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_angle_increment();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_increment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float time_increment = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_time_increment();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_increment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float scan_time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_scan_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scan_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float range_min = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_range_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float range_max = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_range_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double ranges = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 89u, input, this->mutable_ranges())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_ranges())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double intensitys = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 97u, input, this->mutable_intensitys())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_intensitys())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_msg.LaserScan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_msg.LaserScan)
  return false;
#undef DO_
}

void LaserScan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_msg.LaserScan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string protocol_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->protocol_type().data(), static_cast<int>(this->protocol_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto_msg.LaserScan.protocol_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->protocol_type(), output);
  }

  // required double publish_stamp = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->publish_stamp(), output);
  }

  // required string frame_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), static_cast<int>(this->frame_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto_msg.LaserScan.frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->frame_id(), output);
  }

  // required float angle_min = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->angle_min(), output);
  }

  // required float angle_max = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->angle_max(), output);
  }

  // required float angle_increment = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->angle_increment(), output);
  }

  // required float time_increment = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->time_increment(), output);
  }

  // required float scan_time = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->scan_time(), output);
  }

  // required float range_min = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->range_min(), output);
  }

  // required float range_max = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->range_max(), output);
  }

  // repeated double ranges = 11;
  for (int i = 0, n = this->ranges_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      11, this->ranges(i), output);
  }

  // repeated double intensitys = 12;
  for (int i = 0, n = this->intensitys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      12, this->intensitys(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_msg.LaserScan)
}

::google::protobuf::uint8* LaserScan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto_msg.LaserScan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string protocol_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->protocol_type().data(), static_cast<int>(this->protocol_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto_msg.LaserScan.protocol_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->protocol_type(), target);
  }

  // required double publish_stamp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->publish_stamp(), target);
  }

  // required string frame_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), static_cast<int>(this->frame_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto_msg.LaserScan.frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->frame_id(), target);
  }

  // required float angle_min = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->angle_min(), target);
  }

  // required float angle_max = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->angle_max(), target);
  }

  // required float angle_increment = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->angle_increment(), target);
  }

  // required float time_increment = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->time_increment(), target);
  }

  // required float scan_time = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->scan_time(), target);
  }

  // required float range_min = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->range_min(), target);
  }

  // required float range_max = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->range_max(), target);
  }

  // repeated double ranges = 11;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(11, this->ranges_, target);

  // repeated double intensitys = 12;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(12, this->intensitys_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_msg.LaserScan)
  return target;
}

size_t LaserScan::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto_msg.LaserScan)
  size_t total_size = 0;

  if (has_protocol_type()) {
    // required string protocol_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocol_type());
  }

  if (has_frame_id()) {
    // required string frame_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->frame_id());
  }

  if (has_publish_stamp()) {
    // required double publish_stamp = 2;
    total_size += 1 + 8;
  }

  if (has_angle_min()) {
    // required float angle_min = 4;
    total_size += 1 + 4;
  }

  if (has_angle_max()) {
    // required float angle_max = 5;
    total_size += 1 + 4;
  }

  if (has_angle_increment()) {
    // required float angle_increment = 6;
    total_size += 1 + 4;
  }

  if (has_time_increment()) {
    // required float time_increment = 7;
    total_size += 1 + 4;
  }

  if (has_scan_time()) {
    // required float scan_time = 8;
    total_size += 1 + 4;
  }

  if (has_range_min()) {
    // required float range_min = 9;
    total_size += 1 + 4;
  }

  if (has_range_max()) {
    // required float range_max = 10;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t LaserScan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_msg.LaserScan)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required string protocol_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocol_type());

    // required string frame_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->frame_id());

    // required double publish_stamp = 2;
    total_size += 1 + 8;

    // required float angle_min = 4;
    total_size += 1 + 4;

    // required float angle_max = 5;
    total_size += 1 + 4;

    // required float angle_increment = 6;
    total_size += 1 + 4;

    // required float time_increment = 7;
    total_size += 1 + 4;

    // required float scan_time = 8;
    total_size += 1 + 4;

    // required float range_min = 9;
    total_size += 1 + 4;

    // required float range_max = 10;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated double ranges = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->ranges_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ranges_size());
    total_size += data_size;
  }

  // repeated double intensitys = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->intensitys_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->intensitys_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaserScan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_msg.LaserScan)
  GOOGLE_DCHECK_NE(&from, this);
  const LaserScan* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaserScan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_msg.LaserScan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_msg.LaserScan)
    MergeFrom(*source);
  }
}

void LaserScan::MergeFrom(const LaserScan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_msg.LaserScan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ranges_.MergeFrom(from.ranges_);
  intensitys_.MergeFrom(from.intensitys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_protocol_type();
      protocol_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_frame_id();
      frame_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      publish_stamp_ = from.publish_stamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      angle_min_ = from.angle_min_;
    }
    if (cached_has_bits & 0x00000010u) {
      angle_max_ = from.angle_max_;
    }
    if (cached_has_bits & 0x00000020u) {
      angle_increment_ = from.angle_increment_;
    }
    if (cached_has_bits & 0x00000040u) {
      time_increment_ = from.time_increment_;
    }
    if (cached_has_bits & 0x00000080u) {
      scan_time_ = from.scan_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      range_min_ = from.range_min_;
    }
    if (cached_has_bits & 0x00000200u) {
      range_max_ = from.range_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaserScan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_msg.LaserScan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaserScan::CopyFrom(const LaserScan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_msg.LaserScan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaserScan::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  return true;
}

void LaserScan::Swap(LaserScan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaserScan::InternalSwap(LaserScan* other) {
  using std::swap;
  ranges_.InternalSwap(&other->ranges_);
  intensitys_.InternalSwap(&other->intensitys_);
  protocol_type_.Swap(&other->protocol_type_);
  frame_id_.Swap(&other->frame_id_);
  swap(publish_stamp_, other->publish_stamp_);
  swap(angle_min_, other->angle_min_);
  swap(angle_max_, other->angle_max_);
  swap(angle_increment_, other->angle_increment_);
  swap(time_increment_, other->time_increment_);
  swap(scan_time_, other->scan_time_);
  swap(range_min_, other->range_min_);
  swap(range_max_, other->range_max_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaserScan::GetMetadata() const {
  protobuf_proto_5fmsgs_2eLaserScan_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_5fmsgs_2eLaserScan_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaserScan

// required string protocol_type = 1;
bool LaserScan::has_protocol_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LaserScan::set_has_protocol_type() {
  _has_bits_[0] |= 0x00000001u;
}
void LaserScan::clear_has_protocol_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void LaserScan::clear_protocol_type() {
  protocol_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_protocol_type();
}
const ::std::string& LaserScan::protocol_type() const {
  // @@protoc_insertion_point(field_get:proto_msg.LaserScan.protocol_type)
  return protocol_type_.GetNoArena();
}
void LaserScan::set_protocol_type(const ::std::string& value) {
  set_has_protocol_type();
  protocol_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_msg.LaserScan.protocol_type)
}
#if LANG_CXX11
void LaserScan::set_protocol_type(::std::string&& value) {
  set_has_protocol_type();
  protocol_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_msg.LaserScan.protocol_type)
}
#endif
void LaserScan::set_protocol_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_protocol_type();
  protocol_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_msg.LaserScan.protocol_type)
}
void LaserScan::set_protocol_type(const char* value, size_t size) {
  set_has_protocol_type();
  protocol_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_msg.LaserScan.protocol_type)
}
::std::string* LaserScan::mutable_protocol_type() {
  set_has_protocol_type();
  // @@protoc_insertion_point(field_mutable:proto_msg.LaserScan.protocol_type)
  return protocol_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LaserScan::release_protocol_type() {
  // @@protoc_insertion_point(field_release:proto_msg.LaserScan.protocol_type)
  clear_has_protocol_type();
  return protocol_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LaserScan::set_allocated_protocol_type(::std::string* protocol_type) {
  if (protocol_type != NULL) {
    set_has_protocol_type();
  } else {
    clear_has_protocol_type();
  }
  protocol_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol_type);
  // @@protoc_insertion_point(field_set_allocated:proto_msg.LaserScan.protocol_type)
}

// required double publish_stamp = 2;
bool LaserScan::has_publish_stamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LaserScan::set_has_publish_stamp() {
  _has_bits_[0] |= 0x00000004u;
}
void LaserScan::clear_has_publish_stamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void LaserScan::clear_publish_stamp() {
  publish_stamp_ = 0;
  clear_has_publish_stamp();
}
double LaserScan::publish_stamp() const {
  // @@protoc_insertion_point(field_get:proto_msg.LaserScan.publish_stamp)
  return publish_stamp_;
}
void LaserScan::set_publish_stamp(double value) {
  set_has_publish_stamp();
  publish_stamp_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.LaserScan.publish_stamp)
}

// required string frame_id = 3;
bool LaserScan::has_frame_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LaserScan::set_has_frame_id() {
  _has_bits_[0] |= 0x00000002u;
}
void LaserScan::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void LaserScan::clear_frame_id() {
  frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_frame_id();
}
const ::std::string& LaserScan::frame_id() const {
  // @@protoc_insertion_point(field_get:proto_msg.LaserScan.frame_id)
  return frame_id_.GetNoArena();
}
void LaserScan::set_frame_id(const ::std::string& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_msg.LaserScan.frame_id)
}
#if LANG_CXX11
void LaserScan::set_frame_id(::std::string&& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_msg.LaserScan.frame_id)
}
#endif
void LaserScan::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_msg.LaserScan.frame_id)
}
void LaserScan::set_frame_id(const char* value, size_t size) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_msg.LaserScan.frame_id)
}
::std::string* LaserScan::mutable_frame_id() {
  set_has_frame_id();
  // @@protoc_insertion_point(field_mutable:proto_msg.LaserScan.frame_id)
  return frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LaserScan::release_frame_id() {
  // @@protoc_insertion_point(field_release:proto_msg.LaserScan.frame_id)
  clear_has_frame_id();
  return frame_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LaserScan::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id != NULL) {
    set_has_frame_id();
  } else {
    clear_has_frame_id();
  }
  frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_id);
  // @@protoc_insertion_point(field_set_allocated:proto_msg.LaserScan.frame_id)
}

// required float angle_min = 4;
bool LaserScan::has_angle_min() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LaserScan::set_has_angle_min() {
  _has_bits_[0] |= 0x00000008u;
}
void LaserScan::clear_has_angle_min() {
  _has_bits_[0] &= ~0x00000008u;
}
void LaserScan::clear_angle_min() {
  angle_min_ = 0;
  clear_has_angle_min();
}
float LaserScan::angle_min() const {
  // @@protoc_insertion_point(field_get:proto_msg.LaserScan.angle_min)
  return angle_min_;
}
void LaserScan::set_angle_min(float value) {
  set_has_angle_min();
  angle_min_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.LaserScan.angle_min)
}

// required float angle_max = 5;
bool LaserScan::has_angle_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LaserScan::set_has_angle_max() {
  _has_bits_[0] |= 0x00000010u;
}
void LaserScan::clear_has_angle_max() {
  _has_bits_[0] &= ~0x00000010u;
}
void LaserScan::clear_angle_max() {
  angle_max_ = 0;
  clear_has_angle_max();
}
float LaserScan::angle_max() const {
  // @@protoc_insertion_point(field_get:proto_msg.LaserScan.angle_max)
  return angle_max_;
}
void LaserScan::set_angle_max(float value) {
  set_has_angle_max();
  angle_max_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.LaserScan.angle_max)
}

// required float angle_increment = 6;
bool LaserScan::has_angle_increment() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LaserScan::set_has_angle_increment() {
  _has_bits_[0] |= 0x00000020u;
}
void LaserScan::clear_has_angle_increment() {
  _has_bits_[0] &= ~0x00000020u;
}
void LaserScan::clear_angle_increment() {
  angle_increment_ = 0;
  clear_has_angle_increment();
}
float LaserScan::angle_increment() const {
  // @@protoc_insertion_point(field_get:proto_msg.LaserScan.angle_increment)
  return angle_increment_;
}
void LaserScan::set_angle_increment(float value) {
  set_has_angle_increment();
  angle_increment_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.LaserScan.angle_increment)
}

// required float time_increment = 7;
bool LaserScan::has_time_increment() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LaserScan::set_has_time_increment() {
  _has_bits_[0] |= 0x00000040u;
}
void LaserScan::clear_has_time_increment() {
  _has_bits_[0] &= ~0x00000040u;
}
void LaserScan::clear_time_increment() {
  time_increment_ = 0;
  clear_has_time_increment();
}
float LaserScan::time_increment() const {
  // @@protoc_insertion_point(field_get:proto_msg.LaserScan.time_increment)
  return time_increment_;
}
void LaserScan::set_time_increment(float value) {
  set_has_time_increment();
  time_increment_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.LaserScan.time_increment)
}

// required float scan_time = 8;
bool LaserScan::has_scan_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LaserScan::set_has_scan_time() {
  _has_bits_[0] |= 0x00000080u;
}
void LaserScan::clear_has_scan_time() {
  _has_bits_[0] &= ~0x00000080u;
}
void LaserScan::clear_scan_time() {
  scan_time_ = 0;
  clear_has_scan_time();
}
float LaserScan::scan_time() const {
  // @@protoc_insertion_point(field_get:proto_msg.LaserScan.scan_time)
  return scan_time_;
}
void LaserScan::set_scan_time(float value) {
  set_has_scan_time();
  scan_time_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.LaserScan.scan_time)
}

// required float range_min = 9;
bool LaserScan::has_range_min() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LaserScan::set_has_range_min() {
  _has_bits_[0] |= 0x00000100u;
}
void LaserScan::clear_has_range_min() {
  _has_bits_[0] &= ~0x00000100u;
}
void LaserScan::clear_range_min() {
  range_min_ = 0;
  clear_has_range_min();
}
float LaserScan::range_min() const {
  // @@protoc_insertion_point(field_get:proto_msg.LaserScan.range_min)
  return range_min_;
}
void LaserScan::set_range_min(float value) {
  set_has_range_min();
  range_min_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.LaserScan.range_min)
}

// required float range_max = 10;
bool LaserScan::has_range_max() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void LaserScan::set_has_range_max() {
  _has_bits_[0] |= 0x00000200u;
}
void LaserScan::clear_has_range_max() {
  _has_bits_[0] &= ~0x00000200u;
}
void LaserScan::clear_range_max() {
  range_max_ = 0;
  clear_has_range_max();
}
float LaserScan::range_max() const {
  // @@protoc_insertion_point(field_get:proto_msg.LaserScan.range_max)
  return range_max_;
}
void LaserScan::set_range_max(float value) {
  set_has_range_max();
  range_max_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.LaserScan.range_max)
}

// repeated double ranges = 11;
int LaserScan::ranges_size() const {
  return ranges_.size();
}
void LaserScan::clear_ranges() {
  ranges_.Clear();
}
double LaserScan::ranges(int index) const {
  // @@protoc_insertion_point(field_get:proto_msg.LaserScan.ranges)
  return ranges_.Get(index);
}
void LaserScan::set_ranges(int index, double value) {
  ranges_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_msg.LaserScan.ranges)
}
void LaserScan::add_ranges(double value) {
  ranges_.Add(value);
  // @@protoc_insertion_point(field_add:proto_msg.LaserScan.ranges)
}
const ::google::protobuf::RepeatedField< double >&
LaserScan::ranges() const {
  // @@protoc_insertion_point(field_list:proto_msg.LaserScan.ranges)
  return ranges_;
}
::google::protobuf::RepeatedField< double >*
LaserScan::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:proto_msg.LaserScan.ranges)
  return &ranges_;
}

// repeated double intensitys = 12;
int LaserScan::intensitys_size() const {
  return intensitys_.size();
}
void LaserScan::clear_intensitys() {
  intensitys_.Clear();
}
double LaserScan::intensitys(int index) const {
  // @@protoc_insertion_point(field_get:proto_msg.LaserScan.intensitys)
  return intensitys_.Get(index);
}
void LaserScan::set_intensitys(int index, double value) {
  intensitys_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_msg.LaserScan.intensitys)
}
void LaserScan::add_intensitys(double value) {
  intensitys_.Add(value);
  // @@protoc_insertion_point(field_add:proto_msg.LaserScan.intensitys)
}
const ::google::protobuf::RepeatedField< double >&
LaserScan::intensitys() const {
  // @@protoc_insertion_point(field_list:proto_msg.LaserScan.intensitys)
  return intensitys_;
}
::google::protobuf::RepeatedField< double >*
LaserScan::mutable_intensitys() {
  // @@protoc_insertion_point(field_mutable_list:proto_msg.LaserScan.intensitys)
  return &intensitys_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_msg

// @@protoc_insertion_point(global_scope)
