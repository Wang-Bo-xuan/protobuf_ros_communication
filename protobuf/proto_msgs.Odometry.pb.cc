// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_msgs.Odometry.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto_msgs.Odometry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_msg {
class OdometryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Odometry>
     _instance;
} _Odometry_default_instance_;

namespace protobuf_proto_5fmsgs_2eOdometry_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry, protocol_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry, publish_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry, frame_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry, child_frame_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry, pose_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry, pose_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry, pose_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry, pose_roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry, pose_pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry, pose_yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry, pose_cova_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry, twist_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry, twist_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry, twist_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry, twist_roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry, twist_pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry, twist_yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Odometry, twist_cova_),
  0,
  3,
  1,
  2,
  4,
  5,
  6,
  7,
  8,
  9,
  ~0u,
  10,
  11,
  12,
  13,
  14,
  15,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 23, sizeof(Odometry)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Odometry_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "proto_msgs.Odometry.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Odometry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Odometry_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031proto_msgs.Odometry.proto\022\tproto_msg\"\341"
      "\002\n\010Odometry\022\025\n\rprotocol_type\030\001 \002(\t\022\025\n\rpu"
      "blish_stamp\030\002 \002(\001\022\020\n\010frame_id\030\003 \002(\t\022\026\n\016c"
      "hild_frame_id\030\004 \002(\t\022\016\n\006pose_x\030\005 \002(\001\022\016\n\006p"
      "ose_y\030\006 \002(\001\022\016\n\006pose_z\030\007 \002(\001\022\021\n\tpose_roll"
      "\030\010 \002(\001\022\022\n\npose_pitch\030\t \002(\001\022\020\n\010pose_yaw\030\n"
      " \002(\001\022\021\n\tpose_cova\030\013 \003(\001\022\017\n\007twist_x\030\014 \002(\001"
      "\022\017\n\007twist_y\030\r \002(\001\022\017\n\007twist_z\030\016 \002(\001\022\022\n\ntw"
      "ist_roll\030\017 \002(\001\022\023\n\013twist_pitch\030\020 \002(\001\022\021\n\tt"
      "wist_yaw\030\021 \002(\001\022\022\n\ntwist_cova\030\022 \003(\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 394);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto_msgs.Odometry.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_proto_5fmsgs_2eOdometry_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Odometry::kProtocolTypeFieldNumber;
const int Odometry::kPublishStampFieldNumber;
const int Odometry::kFrameIdFieldNumber;
const int Odometry::kChildFrameIdFieldNumber;
const int Odometry::kPoseXFieldNumber;
const int Odometry::kPoseYFieldNumber;
const int Odometry::kPoseZFieldNumber;
const int Odometry::kPoseRollFieldNumber;
const int Odometry::kPosePitchFieldNumber;
const int Odometry::kPoseYawFieldNumber;
const int Odometry::kPoseCovaFieldNumber;
const int Odometry::kTwistXFieldNumber;
const int Odometry::kTwistYFieldNumber;
const int Odometry::kTwistZFieldNumber;
const int Odometry::kTwistRollFieldNumber;
const int Odometry::kTwistPitchFieldNumber;
const int Odometry::kTwistYawFieldNumber;
const int Odometry::kTwistCovaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Odometry::Odometry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_5fmsgs_2eOdometry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_msg.Odometry)
}
Odometry::Odometry(const Odometry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pose_cova_(from.pose_cova_),
      twist_cova_(from.twist_cova_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  protocol_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_protocol_type()) {
    protocol_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_type_);
  }
  frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_frame_id()) {
    frame_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
  }
  child_frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_child_frame_id()) {
    child_frame_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.child_frame_id_);
  }
  ::memcpy(&publish_stamp_, &from.publish_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&twist_yaw_) -
    reinterpret_cast<char*>(&publish_stamp_)) + sizeof(twist_yaw_));
  // @@protoc_insertion_point(copy_constructor:proto_msg.Odometry)
}

void Odometry::SharedCtor() {
  _cached_size_ = 0;
  protocol_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  child_frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&publish_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&twist_yaw_) -
      reinterpret_cast<char*>(&publish_stamp_)) + sizeof(twist_yaw_));
}

Odometry::~Odometry() {
  // @@protoc_insertion_point(destructor:proto_msg.Odometry)
  SharedDtor();
}

void Odometry::SharedDtor() {
  protocol_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  child_frame_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Odometry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Odometry::descriptor() {
  protobuf_proto_5fmsgs_2eOdometry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_5fmsgs_2eOdometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Odometry& Odometry::default_instance() {
  protobuf_proto_5fmsgs_2eOdometry_2eproto::InitDefaults();
  return *internal_default_instance();
}

Odometry* Odometry::New(::google::protobuf::Arena* arena) const {
  Odometry* n = new Odometry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Odometry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_msg.Odometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pose_cova_.Clear();
  twist_cova_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!protocol_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*protocol_type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!frame_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*frame_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!child_frame_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*child_frame_id_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&publish_stamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pose_roll_) -
        reinterpret_cast<char*>(&publish_stamp_)) + sizeof(pose_roll_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&pose_pitch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&twist_yaw_) -
        reinterpret_cast<char*>(&pose_pitch_)) + sizeof(twist_yaw_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Odometry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_msg.Odometry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string protocol_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->protocol_type().data(), static_cast<int>(this->protocol_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto_msg.Odometry.protocol_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double publish_stamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_publish_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &publish_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string frame_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->frame_id().data(), static_cast<int>(this->frame_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto_msg.Odometry.frame_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string child_frame_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_child_frame_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->child_frame_id().data(), static_cast<int>(this->child_frame_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto_msg.Odometry.child_frame_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double pose_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_pose_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pose_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double pose_y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_pose_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pose_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double pose_z = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_pose_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pose_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double pose_roll = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_pose_roll();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pose_roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double pose_pitch = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_pose_pitch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pose_pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double pose_yaw = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_pose_yaw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pose_yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double pose_cova = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 89u, input, this->mutable_pose_cova())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_pose_cova())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double twist_x = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_twist_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &twist_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double twist_y = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_twist_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &twist_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double twist_z = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_twist_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &twist_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double twist_roll = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_twist_roll();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &twist_roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double twist_pitch = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_twist_pitch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &twist_pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double twist_yaw = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_twist_yaw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &twist_yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double twist_cova = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 145u, input, this->mutable_twist_cova())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_twist_cova())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_msg.Odometry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_msg.Odometry)
  return false;
#undef DO_
}

void Odometry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_msg.Odometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string protocol_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->protocol_type().data(), static_cast<int>(this->protocol_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto_msg.Odometry.protocol_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->protocol_type(), output);
  }

  // required double publish_stamp = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->publish_stamp(), output);
  }

  // required string frame_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), static_cast<int>(this->frame_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto_msg.Odometry.frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->frame_id(), output);
  }

  // required string child_frame_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->child_frame_id().data(), static_cast<int>(this->child_frame_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto_msg.Odometry.child_frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->child_frame_id(), output);
  }

  // required double pose_x = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->pose_x(), output);
  }

  // required double pose_y = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->pose_y(), output);
  }

  // required double pose_z = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->pose_z(), output);
  }

  // required double pose_roll = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->pose_roll(), output);
  }

  // required double pose_pitch = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->pose_pitch(), output);
  }

  // required double pose_yaw = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->pose_yaw(), output);
  }

  // repeated double pose_cova = 11;
  for (int i = 0, n = this->pose_cova_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      11, this->pose_cova(i), output);
  }

  // required double twist_x = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->twist_x(), output);
  }

  // required double twist_y = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->twist_y(), output);
  }

  // required double twist_z = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->twist_z(), output);
  }

  // required double twist_roll = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->twist_roll(), output);
  }

  // required double twist_pitch = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->twist_pitch(), output);
  }

  // required double twist_yaw = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->twist_yaw(), output);
  }

  // repeated double twist_cova = 18;
  for (int i = 0, n = this->twist_cova_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      18, this->twist_cova(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_msg.Odometry)
}

::google::protobuf::uint8* Odometry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto_msg.Odometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string protocol_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->protocol_type().data(), static_cast<int>(this->protocol_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto_msg.Odometry.protocol_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->protocol_type(), target);
  }

  // required double publish_stamp = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->publish_stamp(), target);
  }

  // required string frame_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), static_cast<int>(this->frame_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto_msg.Odometry.frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->frame_id(), target);
  }

  // required string child_frame_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->child_frame_id().data(), static_cast<int>(this->child_frame_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto_msg.Odometry.child_frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->child_frame_id(), target);
  }

  // required double pose_x = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->pose_x(), target);
  }

  // required double pose_y = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->pose_y(), target);
  }

  // required double pose_z = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->pose_z(), target);
  }

  // required double pose_roll = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->pose_roll(), target);
  }

  // required double pose_pitch = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->pose_pitch(), target);
  }

  // required double pose_yaw = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->pose_yaw(), target);
  }

  // repeated double pose_cova = 11;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(11, this->pose_cova_, target);

  // required double twist_x = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->twist_x(), target);
  }

  // required double twist_y = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->twist_y(), target);
  }

  // required double twist_z = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->twist_z(), target);
  }

  // required double twist_roll = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->twist_roll(), target);
  }

  // required double twist_pitch = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->twist_pitch(), target);
  }

  // required double twist_yaw = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->twist_yaw(), target);
  }

  // repeated double twist_cova = 18;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(18, this->twist_cova_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_msg.Odometry)
  return target;
}

size_t Odometry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto_msg.Odometry)
  size_t total_size = 0;

  if (has_protocol_type()) {
    // required string protocol_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocol_type());
  }

  if (has_frame_id()) {
    // required string frame_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->frame_id());
  }

  if (has_child_frame_id()) {
    // required string child_frame_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->child_frame_id());
  }

  if (has_publish_stamp()) {
    // required double publish_stamp = 2;
    total_size += 1 + 8;
  }

  if (has_pose_x()) {
    // required double pose_x = 5;
    total_size += 1 + 8;
  }

  if (has_pose_y()) {
    // required double pose_y = 6;
    total_size += 1 + 8;
  }

  if (has_pose_z()) {
    // required double pose_z = 7;
    total_size += 1 + 8;
  }

  if (has_pose_roll()) {
    // required double pose_roll = 8;
    total_size += 1 + 8;
  }

  if (has_pose_pitch()) {
    // required double pose_pitch = 9;
    total_size += 1 + 8;
  }

  if (has_pose_yaw()) {
    // required double pose_yaw = 10;
    total_size += 1 + 8;
  }

  if (has_twist_x()) {
    // required double twist_x = 12;
    total_size += 1 + 8;
  }

  if (has_twist_y()) {
    // required double twist_y = 13;
    total_size += 1 + 8;
  }

  if (has_twist_z()) {
    // required double twist_z = 14;
    total_size += 1 + 8;
  }

  if (has_twist_roll()) {
    // required double twist_roll = 15;
    total_size += 1 + 8;
  }

  if (has_twist_pitch()) {
    // required double twist_pitch = 16;
    total_size += 2 + 8;
  }

  if (has_twist_yaw()) {
    // required double twist_yaw = 17;
    total_size += 2 + 8;
  }

  return total_size;
}
size_t Odometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_msg.Odometry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000ffff) ^ 0x0000ffff) == 0) {  // All required fields are present.
    // required string protocol_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocol_type());

    // required string frame_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->frame_id());

    // required string child_frame_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->child_frame_id());

    // required double publish_stamp = 2;
    total_size += 1 + 8;

    // required double pose_x = 5;
    total_size += 1 + 8;

    // required double pose_y = 6;
    total_size += 1 + 8;

    // required double pose_z = 7;
    total_size += 1 + 8;

    // required double pose_roll = 8;
    total_size += 1 + 8;

    // required double pose_pitch = 9;
    total_size += 1 + 8;

    // required double pose_yaw = 10;
    total_size += 1 + 8;

    // required double twist_x = 12;
    total_size += 1 + 8;

    // required double twist_y = 13;
    total_size += 1 + 8;

    // required double twist_z = 14;
    total_size += 1 + 8;

    // required double twist_roll = 15;
    total_size += 1 + 8;

    // required double twist_pitch = 16;
    total_size += 2 + 8;

    // required double twist_yaw = 17;
    total_size += 2 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated double pose_cova = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->pose_cova_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->pose_cova_size());
    total_size += data_size;
  }

  // repeated double twist_cova = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->twist_cova_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->twist_cova_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Odometry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_msg.Odometry)
  GOOGLE_DCHECK_NE(&from, this);
  const Odometry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Odometry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_msg.Odometry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_msg.Odometry)
    MergeFrom(*source);
  }
}

void Odometry::MergeFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_msg.Odometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pose_cova_.MergeFrom(from.pose_cova_);
  twist_cova_.MergeFrom(from.twist_cova_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_protocol_type();
      protocol_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_frame_id();
      frame_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_child_frame_id();
      child_frame_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.child_frame_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      publish_stamp_ = from.publish_stamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      pose_x_ = from.pose_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      pose_y_ = from.pose_y_;
    }
    if (cached_has_bits & 0x00000040u) {
      pose_z_ = from.pose_z_;
    }
    if (cached_has_bits & 0x00000080u) {
      pose_roll_ = from.pose_roll_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      pose_pitch_ = from.pose_pitch_;
    }
    if (cached_has_bits & 0x00000200u) {
      pose_yaw_ = from.pose_yaw_;
    }
    if (cached_has_bits & 0x00000400u) {
      twist_x_ = from.twist_x_;
    }
    if (cached_has_bits & 0x00000800u) {
      twist_y_ = from.twist_y_;
    }
    if (cached_has_bits & 0x00001000u) {
      twist_z_ = from.twist_z_;
    }
    if (cached_has_bits & 0x00002000u) {
      twist_roll_ = from.twist_roll_;
    }
    if (cached_has_bits & 0x00004000u) {
      twist_pitch_ = from.twist_pitch_;
    }
    if (cached_has_bits & 0x00008000u) {
      twist_yaw_ = from.twist_yaw_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Odometry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_msg.Odometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Odometry::CopyFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_msg.Odometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Odometry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000ffff) != 0x0000ffff) return false;
  return true;
}

void Odometry::Swap(Odometry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Odometry::InternalSwap(Odometry* other) {
  using std::swap;
  pose_cova_.InternalSwap(&other->pose_cova_);
  twist_cova_.InternalSwap(&other->twist_cova_);
  protocol_type_.Swap(&other->protocol_type_);
  frame_id_.Swap(&other->frame_id_);
  child_frame_id_.Swap(&other->child_frame_id_);
  swap(publish_stamp_, other->publish_stamp_);
  swap(pose_x_, other->pose_x_);
  swap(pose_y_, other->pose_y_);
  swap(pose_z_, other->pose_z_);
  swap(pose_roll_, other->pose_roll_);
  swap(pose_pitch_, other->pose_pitch_);
  swap(pose_yaw_, other->pose_yaw_);
  swap(twist_x_, other->twist_x_);
  swap(twist_y_, other->twist_y_);
  swap(twist_z_, other->twist_z_);
  swap(twist_roll_, other->twist_roll_);
  swap(twist_pitch_, other->twist_pitch_);
  swap(twist_yaw_, other->twist_yaw_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Odometry::GetMetadata() const {
  protobuf_proto_5fmsgs_2eOdometry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_5fmsgs_2eOdometry_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Odometry

// required string protocol_type = 1;
bool Odometry::has_protocol_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Odometry::set_has_protocol_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Odometry::clear_has_protocol_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Odometry::clear_protocol_type() {
  protocol_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_protocol_type();
}
const ::std::string& Odometry::protocol_type() const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.protocol_type)
  return protocol_type_.GetNoArena();
}
void Odometry::set_protocol_type(const ::std::string& value) {
  set_has_protocol_type();
  protocol_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.protocol_type)
}
#if LANG_CXX11
void Odometry::set_protocol_type(::std::string&& value) {
  set_has_protocol_type();
  protocol_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_msg.Odometry.protocol_type)
}
#endif
void Odometry::set_protocol_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_protocol_type();
  protocol_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_msg.Odometry.protocol_type)
}
void Odometry::set_protocol_type(const char* value, size_t size) {
  set_has_protocol_type();
  protocol_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_msg.Odometry.protocol_type)
}
::std::string* Odometry::mutable_protocol_type() {
  set_has_protocol_type();
  // @@protoc_insertion_point(field_mutable:proto_msg.Odometry.protocol_type)
  return protocol_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Odometry::release_protocol_type() {
  // @@protoc_insertion_point(field_release:proto_msg.Odometry.protocol_type)
  clear_has_protocol_type();
  return protocol_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Odometry::set_allocated_protocol_type(::std::string* protocol_type) {
  if (protocol_type != NULL) {
    set_has_protocol_type();
  } else {
    clear_has_protocol_type();
  }
  protocol_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol_type);
  // @@protoc_insertion_point(field_set_allocated:proto_msg.Odometry.protocol_type)
}

// required double publish_stamp = 2;
bool Odometry::has_publish_stamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Odometry::set_has_publish_stamp() {
  _has_bits_[0] |= 0x00000008u;
}
void Odometry::clear_has_publish_stamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void Odometry::clear_publish_stamp() {
  publish_stamp_ = 0;
  clear_has_publish_stamp();
}
double Odometry::publish_stamp() const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.publish_stamp)
  return publish_stamp_;
}
void Odometry::set_publish_stamp(double value) {
  set_has_publish_stamp();
  publish_stamp_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.publish_stamp)
}

// required string frame_id = 3;
bool Odometry::has_frame_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Odometry::set_has_frame_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Odometry::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Odometry::clear_frame_id() {
  frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_frame_id();
}
const ::std::string& Odometry::frame_id() const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.frame_id)
  return frame_id_.GetNoArena();
}
void Odometry::set_frame_id(const ::std::string& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.frame_id)
}
#if LANG_CXX11
void Odometry::set_frame_id(::std::string&& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_msg.Odometry.frame_id)
}
#endif
void Odometry::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_msg.Odometry.frame_id)
}
void Odometry::set_frame_id(const char* value, size_t size) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_msg.Odometry.frame_id)
}
::std::string* Odometry::mutable_frame_id() {
  set_has_frame_id();
  // @@protoc_insertion_point(field_mutable:proto_msg.Odometry.frame_id)
  return frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Odometry::release_frame_id() {
  // @@protoc_insertion_point(field_release:proto_msg.Odometry.frame_id)
  clear_has_frame_id();
  return frame_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Odometry::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id != NULL) {
    set_has_frame_id();
  } else {
    clear_has_frame_id();
  }
  frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_id);
  // @@protoc_insertion_point(field_set_allocated:proto_msg.Odometry.frame_id)
}

// required string child_frame_id = 4;
bool Odometry::has_child_frame_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Odometry::set_has_child_frame_id() {
  _has_bits_[0] |= 0x00000004u;
}
void Odometry::clear_has_child_frame_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void Odometry::clear_child_frame_id() {
  child_frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_child_frame_id();
}
const ::std::string& Odometry::child_frame_id() const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.child_frame_id)
  return child_frame_id_.GetNoArena();
}
void Odometry::set_child_frame_id(const ::std::string& value) {
  set_has_child_frame_id();
  child_frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.child_frame_id)
}
#if LANG_CXX11
void Odometry::set_child_frame_id(::std::string&& value) {
  set_has_child_frame_id();
  child_frame_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_msg.Odometry.child_frame_id)
}
#endif
void Odometry::set_child_frame_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_child_frame_id();
  child_frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_msg.Odometry.child_frame_id)
}
void Odometry::set_child_frame_id(const char* value, size_t size) {
  set_has_child_frame_id();
  child_frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_msg.Odometry.child_frame_id)
}
::std::string* Odometry::mutable_child_frame_id() {
  set_has_child_frame_id();
  // @@protoc_insertion_point(field_mutable:proto_msg.Odometry.child_frame_id)
  return child_frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Odometry::release_child_frame_id() {
  // @@protoc_insertion_point(field_release:proto_msg.Odometry.child_frame_id)
  clear_has_child_frame_id();
  return child_frame_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Odometry::set_allocated_child_frame_id(::std::string* child_frame_id) {
  if (child_frame_id != NULL) {
    set_has_child_frame_id();
  } else {
    clear_has_child_frame_id();
  }
  child_frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), child_frame_id);
  // @@protoc_insertion_point(field_set_allocated:proto_msg.Odometry.child_frame_id)
}

// required double pose_x = 5;
bool Odometry::has_pose_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Odometry::set_has_pose_x() {
  _has_bits_[0] |= 0x00000010u;
}
void Odometry::clear_has_pose_x() {
  _has_bits_[0] &= ~0x00000010u;
}
void Odometry::clear_pose_x() {
  pose_x_ = 0;
  clear_has_pose_x();
}
double Odometry::pose_x() const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.pose_x)
  return pose_x_;
}
void Odometry::set_pose_x(double value) {
  set_has_pose_x();
  pose_x_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.pose_x)
}

// required double pose_y = 6;
bool Odometry::has_pose_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Odometry::set_has_pose_y() {
  _has_bits_[0] |= 0x00000020u;
}
void Odometry::clear_has_pose_y() {
  _has_bits_[0] &= ~0x00000020u;
}
void Odometry::clear_pose_y() {
  pose_y_ = 0;
  clear_has_pose_y();
}
double Odometry::pose_y() const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.pose_y)
  return pose_y_;
}
void Odometry::set_pose_y(double value) {
  set_has_pose_y();
  pose_y_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.pose_y)
}

// required double pose_z = 7;
bool Odometry::has_pose_z() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Odometry::set_has_pose_z() {
  _has_bits_[0] |= 0x00000040u;
}
void Odometry::clear_has_pose_z() {
  _has_bits_[0] &= ~0x00000040u;
}
void Odometry::clear_pose_z() {
  pose_z_ = 0;
  clear_has_pose_z();
}
double Odometry::pose_z() const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.pose_z)
  return pose_z_;
}
void Odometry::set_pose_z(double value) {
  set_has_pose_z();
  pose_z_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.pose_z)
}

// required double pose_roll = 8;
bool Odometry::has_pose_roll() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Odometry::set_has_pose_roll() {
  _has_bits_[0] |= 0x00000080u;
}
void Odometry::clear_has_pose_roll() {
  _has_bits_[0] &= ~0x00000080u;
}
void Odometry::clear_pose_roll() {
  pose_roll_ = 0;
  clear_has_pose_roll();
}
double Odometry::pose_roll() const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.pose_roll)
  return pose_roll_;
}
void Odometry::set_pose_roll(double value) {
  set_has_pose_roll();
  pose_roll_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.pose_roll)
}

// required double pose_pitch = 9;
bool Odometry::has_pose_pitch() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Odometry::set_has_pose_pitch() {
  _has_bits_[0] |= 0x00000100u;
}
void Odometry::clear_has_pose_pitch() {
  _has_bits_[0] &= ~0x00000100u;
}
void Odometry::clear_pose_pitch() {
  pose_pitch_ = 0;
  clear_has_pose_pitch();
}
double Odometry::pose_pitch() const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.pose_pitch)
  return pose_pitch_;
}
void Odometry::set_pose_pitch(double value) {
  set_has_pose_pitch();
  pose_pitch_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.pose_pitch)
}

// required double pose_yaw = 10;
bool Odometry::has_pose_yaw() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Odometry::set_has_pose_yaw() {
  _has_bits_[0] |= 0x00000200u;
}
void Odometry::clear_has_pose_yaw() {
  _has_bits_[0] &= ~0x00000200u;
}
void Odometry::clear_pose_yaw() {
  pose_yaw_ = 0;
  clear_has_pose_yaw();
}
double Odometry::pose_yaw() const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.pose_yaw)
  return pose_yaw_;
}
void Odometry::set_pose_yaw(double value) {
  set_has_pose_yaw();
  pose_yaw_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.pose_yaw)
}

// repeated double pose_cova = 11;
int Odometry::pose_cova_size() const {
  return pose_cova_.size();
}
void Odometry::clear_pose_cova() {
  pose_cova_.Clear();
}
double Odometry::pose_cova(int index) const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.pose_cova)
  return pose_cova_.Get(index);
}
void Odometry::set_pose_cova(int index, double value) {
  pose_cova_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.pose_cova)
}
void Odometry::add_pose_cova(double value) {
  pose_cova_.Add(value);
  // @@protoc_insertion_point(field_add:proto_msg.Odometry.pose_cova)
}
const ::google::protobuf::RepeatedField< double >&
Odometry::pose_cova() const {
  // @@protoc_insertion_point(field_list:proto_msg.Odometry.pose_cova)
  return pose_cova_;
}
::google::protobuf::RepeatedField< double >*
Odometry::mutable_pose_cova() {
  // @@protoc_insertion_point(field_mutable_list:proto_msg.Odometry.pose_cova)
  return &pose_cova_;
}

// required double twist_x = 12;
bool Odometry::has_twist_x() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Odometry::set_has_twist_x() {
  _has_bits_[0] |= 0x00000400u;
}
void Odometry::clear_has_twist_x() {
  _has_bits_[0] &= ~0x00000400u;
}
void Odometry::clear_twist_x() {
  twist_x_ = 0;
  clear_has_twist_x();
}
double Odometry::twist_x() const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.twist_x)
  return twist_x_;
}
void Odometry::set_twist_x(double value) {
  set_has_twist_x();
  twist_x_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.twist_x)
}

// required double twist_y = 13;
bool Odometry::has_twist_y() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Odometry::set_has_twist_y() {
  _has_bits_[0] |= 0x00000800u;
}
void Odometry::clear_has_twist_y() {
  _has_bits_[0] &= ~0x00000800u;
}
void Odometry::clear_twist_y() {
  twist_y_ = 0;
  clear_has_twist_y();
}
double Odometry::twist_y() const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.twist_y)
  return twist_y_;
}
void Odometry::set_twist_y(double value) {
  set_has_twist_y();
  twist_y_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.twist_y)
}

// required double twist_z = 14;
bool Odometry::has_twist_z() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Odometry::set_has_twist_z() {
  _has_bits_[0] |= 0x00001000u;
}
void Odometry::clear_has_twist_z() {
  _has_bits_[0] &= ~0x00001000u;
}
void Odometry::clear_twist_z() {
  twist_z_ = 0;
  clear_has_twist_z();
}
double Odometry::twist_z() const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.twist_z)
  return twist_z_;
}
void Odometry::set_twist_z(double value) {
  set_has_twist_z();
  twist_z_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.twist_z)
}

// required double twist_roll = 15;
bool Odometry::has_twist_roll() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Odometry::set_has_twist_roll() {
  _has_bits_[0] |= 0x00002000u;
}
void Odometry::clear_has_twist_roll() {
  _has_bits_[0] &= ~0x00002000u;
}
void Odometry::clear_twist_roll() {
  twist_roll_ = 0;
  clear_has_twist_roll();
}
double Odometry::twist_roll() const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.twist_roll)
  return twist_roll_;
}
void Odometry::set_twist_roll(double value) {
  set_has_twist_roll();
  twist_roll_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.twist_roll)
}

// required double twist_pitch = 16;
bool Odometry::has_twist_pitch() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Odometry::set_has_twist_pitch() {
  _has_bits_[0] |= 0x00004000u;
}
void Odometry::clear_has_twist_pitch() {
  _has_bits_[0] &= ~0x00004000u;
}
void Odometry::clear_twist_pitch() {
  twist_pitch_ = 0;
  clear_has_twist_pitch();
}
double Odometry::twist_pitch() const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.twist_pitch)
  return twist_pitch_;
}
void Odometry::set_twist_pitch(double value) {
  set_has_twist_pitch();
  twist_pitch_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.twist_pitch)
}

// required double twist_yaw = 17;
bool Odometry::has_twist_yaw() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Odometry::set_has_twist_yaw() {
  _has_bits_[0] |= 0x00008000u;
}
void Odometry::clear_has_twist_yaw() {
  _has_bits_[0] &= ~0x00008000u;
}
void Odometry::clear_twist_yaw() {
  twist_yaw_ = 0;
  clear_has_twist_yaw();
}
double Odometry::twist_yaw() const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.twist_yaw)
  return twist_yaw_;
}
void Odometry::set_twist_yaw(double value) {
  set_has_twist_yaw();
  twist_yaw_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.twist_yaw)
}

// repeated double twist_cova = 18;
int Odometry::twist_cova_size() const {
  return twist_cova_.size();
}
void Odometry::clear_twist_cova() {
  twist_cova_.Clear();
}
double Odometry::twist_cova(int index) const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.twist_cova)
  return twist_cova_.Get(index);
}
void Odometry::set_twist_cova(int index, double value) {
  twist_cova_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.twist_cova)
}
void Odometry::add_twist_cova(double value) {
  twist_cova_.Add(value);
  // @@protoc_insertion_point(field_add:proto_msg.Odometry.twist_cova)
}
const ::google::protobuf::RepeatedField< double >&
Odometry::twist_cova() const {
  // @@protoc_insertion_point(field_list:proto_msg.Odometry.twist_cova)
  return twist_cova_;
}
::google::protobuf::RepeatedField< double >*
Odometry::mutable_twist_cova() {
  // @@protoc_insertion_point(field_mutable_list:proto_msg.Odometry.twist_cova)
  return &twist_cova_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_msg

// @@protoc_insertion_point(global_scope)
