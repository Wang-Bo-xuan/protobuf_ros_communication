// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_msgs.Odometry.proto

#ifndef PROTOBUF_proto_5fmsgs_2eOdometry_2eproto__INCLUDED
#define PROTOBUF_proto_5fmsgs_2eOdometry_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace proto_msg {
class Odometry;
class OdometryDefaultTypeInternal;
extern OdometryDefaultTypeInternal _Odometry_default_instance_;
}  // namespace proto_msg

namespace proto_msg {

namespace protobuf_proto_5fmsgs_2eOdometry_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_proto_5fmsgs_2eOdometry_2eproto

// ===================================================================

class Odometry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto_msg.Odometry) */ {
 public:
  Odometry();
  virtual ~Odometry();

  Odometry(const Odometry& from);

  inline Odometry& operator=(const Odometry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Odometry(Odometry&& from) noexcept
    : Odometry() {
    *this = ::std::move(from);
  }

  inline Odometry& operator=(Odometry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Odometry& default_instance();

  static inline const Odometry* internal_default_instance() {
    return reinterpret_cast<const Odometry*>(
               &_Odometry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Odometry* other);
  friend void swap(Odometry& a, Odometry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Odometry* New() const PROTOBUF_FINAL { return New(NULL); }

  Odometry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Odometry& from);
  void MergeFrom(const Odometry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Odometry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double pose_cova = 11;
  int pose_cova_size() const;
  void clear_pose_cova();
  static const int kPoseCovaFieldNumber = 11;
  double pose_cova(int index) const;
  void set_pose_cova(int index, double value);
  void add_pose_cova(double value);
  const ::google::protobuf::RepeatedField< double >&
      pose_cova() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_pose_cova();

  // repeated double twist_cova = 18;
  int twist_cova_size() const;
  void clear_twist_cova();
  static const int kTwistCovaFieldNumber = 18;
  double twist_cova(int index) const;
  void set_twist_cova(int index, double value);
  void add_twist_cova(double value);
  const ::google::protobuf::RepeatedField< double >&
      twist_cova() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_twist_cova();

  // required string protocol_type = 1;
  bool has_protocol_type() const;
  void clear_protocol_type();
  static const int kProtocolTypeFieldNumber = 1;
  const ::std::string& protocol_type() const;
  void set_protocol_type(const ::std::string& value);
  #if LANG_CXX11
  void set_protocol_type(::std::string&& value);
  #endif
  void set_protocol_type(const char* value);
  void set_protocol_type(const char* value, size_t size);
  ::std::string* mutable_protocol_type();
  ::std::string* release_protocol_type();
  void set_allocated_protocol_type(::std::string* protocol_type);

  // required string frame_id = 3;
  bool has_frame_id() const;
  void clear_frame_id();
  static const int kFrameIdFieldNumber = 3;
  const ::std::string& frame_id() const;
  void set_frame_id(const ::std::string& value);
  #if LANG_CXX11
  void set_frame_id(::std::string&& value);
  #endif
  void set_frame_id(const char* value);
  void set_frame_id(const char* value, size_t size);
  ::std::string* mutable_frame_id();
  ::std::string* release_frame_id();
  void set_allocated_frame_id(::std::string* frame_id);

  // required string child_frame_id = 4;
  bool has_child_frame_id() const;
  void clear_child_frame_id();
  static const int kChildFrameIdFieldNumber = 4;
  const ::std::string& child_frame_id() const;
  void set_child_frame_id(const ::std::string& value);
  #if LANG_CXX11
  void set_child_frame_id(::std::string&& value);
  #endif
  void set_child_frame_id(const char* value);
  void set_child_frame_id(const char* value, size_t size);
  ::std::string* mutable_child_frame_id();
  ::std::string* release_child_frame_id();
  void set_allocated_child_frame_id(::std::string* child_frame_id);

  // required double publish_stamp = 2;
  bool has_publish_stamp() const;
  void clear_publish_stamp();
  static const int kPublishStampFieldNumber = 2;
  double publish_stamp() const;
  void set_publish_stamp(double value);

  // required double pose_x = 5;
  bool has_pose_x() const;
  void clear_pose_x();
  static const int kPoseXFieldNumber = 5;
  double pose_x() const;
  void set_pose_x(double value);

  // required double pose_y = 6;
  bool has_pose_y() const;
  void clear_pose_y();
  static const int kPoseYFieldNumber = 6;
  double pose_y() const;
  void set_pose_y(double value);

  // required double pose_z = 7;
  bool has_pose_z() const;
  void clear_pose_z();
  static const int kPoseZFieldNumber = 7;
  double pose_z() const;
  void set_pose_z(double value);

  // required double pose_roll = 8;
  bool has_pose_roll() const;
  void clear_pose_roll();
  static const int kPoseRollFieldNumber = 8;
  double pose_roll() const;
  void set_pose_roll(double value);

  // required double pose_pitch = 9;
  bool has_pose_pitch() const;
  void clear_pose_pitch();
  static const int kPosePitchFieldNumber = 9;
  double pose_pitch() const;
  void set_pose_pitch(double value);

  // required double pose_yaw = 10;
  bool has_pose_yaw() const;
  void clear_pose_yaw();
  static const int kPoseYawFieldNumber = 10;
  double pose_yaw() const;
  void set_pose_yaw(double value);

  // required double twist_x = 12;
  bool has_twist_x() const;
  void clear_twist_x();
  static const int kTwistXFieldNumber = 12;
  double twist_x() const;
  void set_twist_x(double value);

  // required double twist_y = 13;
  bool has_twist_y() const;
  void clear_twist_y();
  static const int kTwistYFieldNumber = 13;
  double twist_y() const;
  void set_twist_y(double value);

  // required double twist_z = 14;
  bool has_twist_z() const;
  void clear_twist_z();
  static const int kTwistZFieldNumber = 14;
  double twist_z() const;
  void set_twist_z(double value);

  // required double twist_roll = 15;
  bool has_twist_roll() const;
  void clear_twist_roll();
  static const int kTwistRollFieldNumber = 15;
  double twist_roll() const;
  void set_twist_roll(double value);

  // required double twist_pitch = 16;
  bool has_twist_pitch() const;
  void clear_twist_pitch();
  static const int kTwistPitchFieldNumber = 16;
  double twist_pitch() const;
  void set_twist_pitch(double value);

  // required double twist_yaw = 17;
  bool has_twist_yaw() const;
  void clear_twist_yaw();
  static const int kTwistYawFieldNumber = 17;
  double twist_yaw() const;
  void set_twist_yaw(double value);

  // @@protoc_insertion_point(class_scope:proto_msg.Odometry)
 private:
  void set_has_protocol_type();
  void clear_has_protocol_type();
  void set_has_publish_stamp();
  void clear_has_publish_stamp();
  void set_has_frame_id();
  void clear_has_frame_id();
  void set_has_child_frame_id();
  void clear_has_child_frame_id();
  void set_has_pose_x();
  void clear_has_pose_x();
  void set_has_pose_y();
  void clear_has_pose_y();
  void set_has_pose_z();
  void clear_has_pose_z();
  void set_has_pose_roll();
  void clear_has_pose_roll();
  void set_has_pose_pitch();
  void clear_has_pose_pitch();
  void set_has_pose_yaw();
  void clear_has_pose_yaw();
  void set_has_twist_x();
  void clear_has_twist_x();
  void set_has_twist_y();
  void clear_has_twist_y();
  void set_has_twist_z();
  void clear_has_twist_z();
  void set_has_twist_roll();
  void clear_has_twist_roll();
  void set_has_twist_pitch();
  void clear_has_twist_pitch();
  void set_has_twist_yaw();
  void clear_has_twist_yaw();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > pose_cova_;
  ::google::protobuf::RepeatedField< double > twist_cova_;
  ::google::protobuf::internal::ArenaStringPtr protocol_type_;
  ::google::protobuf::internal::ArenaStringPtr frame_id_;
  ::google::protobuf::internal::ArenaStringPtr child_frame_id_;
  double publish_stamp_;
  double pose_x_;
  double pose_y_;
  double pose_z_;
  double pose_roll_;
  double pose_pitch_;
  double pose_yaw_;
  double twist_x_;
  double twist_y_;
  double twist_z_;
  double twist_roll_;
  double twist_pitch_;
  double twist_yaw_;
  friend struct protobuf_proto_5fmsgs_2eOdometry_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Odometry

// required string protocol_type = 1;
inline bool Odometry::has_protocol_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Odometry::set_has_protocol_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Odometry::clear_has_protocol_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Odometry::clear_protocol_type() {
  protocol_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_protocol_type();
}
inline const ::std::string& Odometry::protocol_type() const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.protocol_type)
  return protocol_type_.GetNoArena();
}
inline void Odometry::set_protocol_type(const ::std::string& value) {
  set_has_protocol_type();
  protocol_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.protocol_type)
}
#if LANG_CXX11
inline void Odometry::set_protocol_type(::std::string&& value) {
  set_has_protocol_type();
  protocol_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_msg.Odometry.protocol_type)
}
#endif
inline void Odometry::set_protocol_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_protocol_type();
  protocol_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_msg.Odometry.protocol_type)
}
inline void Odometry::set_protocol_type(const char* value, size_t size) {
  set_has_protocol_type();
  protocol_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_msg.Odometry.protocol_type)
}
inline ::std::string* Odometry::mutable_protocol_type() {
  set_has_protocol_type();
  // @@protoc_insertion_point(field_mutable:proto_msg.Odometry.protocol_type)
  return protocol_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Odometry::release_protocol_type() {
  // @@protoc_insertion_point(field_release:proto_msg.Odometry.protocol_type)
  clear_has_protocol_type();
  return protocol_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Odometry::set_allocated_protocol_type(::std::string* protocol_type) {
  if (protocol_type != NULL) {
    set_has_protocol_type();
  } else {
    clear_has_protocol_type();
  }
  protocol_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol_type);
  // @@protoc_insertion_point(field_set_allocated:proto_msg.Odometry.protocol_type)
}

// required double publish_stamp = 2;
inline bool Odometry::has_publish_stamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Odometry::set_has_publish_stamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Odometry::clear_has_publish_stamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Odometry::clear_publish_stamp() {
  publish_stamp_ = 0;
  clear_has_publish_stamp();
}
inline double Odometry::publish_stamp() const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.publish_stamp)
  return publish_stamp_;
}
inline void Odometry::set_publish_stamp(double value) {
  set_has_publish_stamp();
  publish_stamp_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.publish_stamp)
}

// required string frame_id = 3;
inline bool Odometry::has_frame_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Odometry::set_has_frame_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Odometry::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Odometry::clear_frame_id() {
  frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_frame_id();
}
inline const ::std::string& Odometry::frame_id() const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.frame_id)
  return frame_id_.GetNoArena();
}
inline void Odometry::set_frame_id(const ::std::string& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.frame_id)
}
#if LANG_CXX11
inline void Odometry::set_frame_id(::std::string&& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_msg.Odometry.frame_id)
}
#endif
inline void Odometry::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_msg.Odometry.frame_id)
}
inline void Odometry::set_frame_id(const char* value, size_t size) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_msg.Odometry.frame_id)
}
inline ::std::string* Odometry::mutable_frame_id() {
  set_has_frame_id();
  // @@protoc_insertion_point(field_mutable:proto_msg.Odometry.frame_id)
  return frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Odometry::release_frame_id() {
  // @@protoc_insertion_point(field_release:proto_msg.Odometry.frame_id)
  clear_has_frame_id();
  return frame_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Odometry::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id != NULL) {
    set_has_frame_id();
  } else {
    clear_has_frame_id();
  }
  frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_id);
  // @@protoc_insertion_point(field_set_allocated:proto_msg.Odometry.frame_id)
}

// required string child_frame_id = 4;
inline bool Odometry::has_child_frame_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Odometry::set_has_child_frame_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Odometry::clear_has_child_frame_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Odometry::clear_child_frame_id() {
  child_frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_child_frame_id();
}
inline const ::std::string& Odometry::child_frame_id() const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.child_frame_id)
  return child_frame_id_.GetNoArena();
}
inline void Odometry::set_child_frame_id(const ::std::string& value) {
  set_has_child_frame_id();
  child_frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.child_frame_id)
}
#if LANG_CXX11
inline void Odometry::set_child_frame_id(::std::string&& value) {
  set_has_child_frame_id();
  child_frame_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_msg.Odometry.child_frame_id)
}
#endif
inline void Odometry::set_child_frame_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_child_frame_id();
  child_frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_msg.Odometry.child_frame_id)
}
inline void Odometry::set_child_frame_id(const char* value, size_t size) {
  set_has_child_frame_id();
  child_frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_msg.Odometry.child_frame_id)
}
inline ::std::string* Odometry::mutable_child_frame_id() {
  set_has_child_frame_id();
  // @@protoc_insertion_point(field_mutable:proto_msg.Odometry.child_frame_id)
  return child_frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Odometry::release_child_frame_id() {
  // @@protoc_insertion_point(field_release:proto_msg.Odometry.child_frame_id)
  clear_has_child_frame_id();
  return child_frame_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Odometry::set_allocated_child_frame_id(::std::string* child_frame_id) {
  if (child_frame_id != NULL) {
    set_has_child_frame_id();
  } else {
    clear_has_child_frame_id();
  }
  child_frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), child_frame_id);
  // @@protoc_insertion_point(field_set_allocated:proto_msg.Odometry.child_frame_id)
}

// required double pose_x = 5;
inline bool Odometry::has_pose_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Odometry::set_has_pose_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Odometry::clear_has_pose_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Odometry::clear_pose_x() {
  pose_x_ = 0;
  clear_has_pose_x();
}
inline double Odometry::pose_x() const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.pose_x)
  return pose_x_;
}
inline void Odometry::set_pose_x(double value) {
  set_has_pose_x();
  pose_x_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.pose_x)
}

// required double pose_y = 6;
inline bool Odometry::has_pose_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Odometry::set_has_pose_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Odometry::clear_has_pose_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Odometry::clear_pose_y() {
  pose_y_ = 0;
  clear_has_pose_y();
}
inline double Odometry::pose_y() const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.pose_y)
  return pose_y_;
}
inline void Odometry::set_pose_y(double value) {
  set_has_pose_y();
  pose_y_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.pose_y)
}

// required double pose_z = 7;
inline bool Odometry::has_pose_z() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Odometry::set_has_pose_z() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Odometry::clear_has_pose_z() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Odometry::clear_pose_z() {
  pose_z_ = 0;
  clear_has_pose_z();
}
inline double Odometry::pose_z() const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.pose_z)
  return pose_z_;
}
inline void Odometry::set_pose_z(double value) {
  set_has_pose_z();
  pose_z_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.pose_z)
}

// required double pose_roll = 8;
inline bool Odometry::has_pose_roll() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Odometry::set_has_pose_roll() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Odometry::clear_has_pose_roll() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Odometry::clear_pose_roll() {
  pose_roll_ = 0;
  clear_has_pose_roll();
}
inline double Odometry::pose_roll() const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.pose_roll)
  return pose_roll_;
}
inline void Odometry::set_pose_roll(double value) {
  set_has_pose_roll();
  pose_roll_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.pose_roll)
}

// required double pose_pitch = 9;
inline bool Odometry::has_pose_pitch() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Odometry::set_has_pose_pitch() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Odometry::clear_has_pose_pitch() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Odometry::clear_pose_pitch() {
  pose_pitch_ = 0;
  clear_has_pose_pitch();
}
inline double Odometry::pose_pitch() const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.pose_pitch)
  return pose_pitch_;
}
inline void Odometry::set_pose_pitch(double value) {
  set_has_pose_pitch();
  pose_pitch_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.pose_pitch)
}

// required double pose_yaw = 10;
inline bool Odometry::has_pose_yaw() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Odometry::set_has_pose_yaw() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Odometry::clear_has_pose_yaw() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Odometry::clear_pose_yaw() {
  pose_yaw_ = 0;
  clear_has_pose_yaw();
}
inline double Odometry::pose_yaw() const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.pose_yaw)
  return pose_yaw_;
}
inline void Odometry::set_pose_yaw(double value) {
  set_has_pose_yaw();
  pose_yaw_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.pose_yaw)
}

// repeated double pose_cova = 11;
inline int Odometry::pose_cova_size() const {
  return pose_cova_.size();
}
inline void Odometry::clear_pose_cova() {
  pose_cova_.Clear();
}
inline double Odometry::pose_cova(int index) const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.pose_cova)
  return pose_cova_.Get(index);
}
inline void Odometry::set_pose_cova(int index, double value) {
  pose_cova_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.pose_cova)
}
inline void Odometry::add_pose_cova(double value) {
  pose_cova_.Add(value);
  // @@protoc_insertion_point(field_add:proto_msg.Odometry.pose_cova)
}
inline const ::google::protobuf::RepeatedField< double >&
Odometry::pose_cova() const {
  // @@protoc_insertion_point(field_list:proto_msg.Odometry.pose_cova)
  return pose_cova_;
}
inline ::google::protobuf::RepeatedField< double >*
Odometry::mutable_pose_cova() {
  // @@protoc_insertion_point(field_mutable_list:proto_msg.Odometry.pose_cova)
  return &pose_cova_;
}

// required double twist_x = 12;
inline bool Odometry::has_twist_x() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Odometry::set_has_twist_x() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Odometry::clear_has_twist_x() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Odometry::clear_twist_x() {
  twist_x_ = 0;
  clear_has_twist_x();
}
inline double Odometry::twist_x() const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.twist_x)
  return twist_x_;
}
inline void Odometry::set_twist_x(double value) {
  set_has_twist_x();
  twist_x_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.twist_x)
}

// required double twist_y = 13;
inline bool Odometry::has_twist_y() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Odometry::set_has_twist_y() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Odometry::clear_has_twist_y() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Odometry::clear_twist_y() {
  twist_y_ = 0;
  clear_has_twist_y();
}
inline double Odometry::twist_y() const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.twist_y)
  return twist_y_;
}
inline void Odometry::set_twist_y(double value) {
  set_has_twist_y();
  twist_y_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.twist_y)
}

// required double twist_z = 14;
inline bool Odometry::has_twist_z() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Odometry::set_has_twist_z() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Odometry::clear_has_twist_z() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Odometry::clear_twist_z() {
  twist_z_ = 0;
  clear_has_twist_z();
}
inline double Odometry::twist_z() const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.twist_z)
  return twist_z_;
}
inline void Odometry::set_twist_z(double value) {
  set_has_twist_z();
  twist_z_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.twist_z)
}

// required double twist_roll = 15;
inline bool Odometry::has_twist_roll() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Odometry::set_has_twist_roll() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Odometry::clear_has_twist_roll() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Odometry::clear_twist_roll() {
  twist_roll_ = 0;
  clear_has_twist_roll();
}
inline double Odometry::twist_roll() const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.twist_roll)
  return twist_roll_;
}
inline void Odometry::set_twist_roll(double value) {
  set_has_twist_roll();
  twist_roll_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.twist_roll)
}

// required double twist_pitch = 16;
inline bool Odometry::has_twist_pitch() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Odometry::set_has_twist_pitch() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Odometry::clear_has_twist_pitch() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Odometry::clear_twist_pitch() {
  twist_pitch_ = 0;
  clear_has_twist_pitch();
}
inline double Odometry::twist_pitch() const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.twist_pitch)
  return twist_pitch_;
}
inline void Odometry::set_twist_pitch(double value) {
  set_has_twist_pitch();
  twist_pitch_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.twist_pitch)
}

// required double twist_yaw = 17;
inline bool Odometry::has_twist_yaw() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Odometry::set_has_twist_yaw() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Odometry::clear_has_twist_yaw() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Odometry::clear_twist_yaw() {
  twist_yaw_ = 0;
  clear_has_twist_yaw();
}
inline double Odometry::twist_yaw() const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.twist_yaw)
  return twist_yaw_;
}
inline void Odometry::set_twist_yaw(double value) {
  set_has_twist_yaw();
  twist_yaw_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.twist_yaw)
}

// repeated double twist_cova = 18;
inline int Odometry::twist_cova_size() const {
  return twist_cova_.size();
}
inline void Odometry::clear_twist_cova() {
  twist_cova_.Clear();
}
inline double Odometry::twist_cova(int index) const {
  // @@protoc_insertion_point(field_get:proto_msg.Odometry.twist_cova)
  return twist_cova_.Get(index);
}
inline void Odometry::set_twist_cova(int index, double value) {
  twist_cova_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_msg.Odometry.twist_cova)
}
inline void Odometry::add_twist_cova(double value) {
  twist_cova_.Add(value);
  // @@protoc_insertion_point(field_add:proto_msg.Odometry.twist_cova)
}
inline const ::google::protobuf::RepeatedField< double >&
Odometry::twist_cova() const {
  // @@protoc_insertion_point(field_list:proto_msg.Odometry.twist_cova)
  return twist_cova_;
}
inline ::google::protobuf::RepeatedField< double >*
Odometry::mutable_twist_cova() {
  // @@protoc_insertion_point(field_mutable_list:proto_msg.Odometry.twist_cova)
  return &twist_cova_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace proto_msg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_5fmsgs_2eOdometry_2eproto__INCLUDED
