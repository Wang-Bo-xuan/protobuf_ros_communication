// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_msgs.LaserScan.proto

#ifndef PROTOBUF_proto_5fmsgs_2eLaserScan_2eproto__INCLUDED
#define PROTOBUF_proto_5fmsgs_2eLaserScan_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace proto_msg {
class LaserScan;
class LaserScanDefaultTypeInternal;
extern LaserScanDefaultTypeInternal _LaserScan_default_instance_;
}  // namespace proto_msg

namespace proto_msg {

namespace protobuf_proto_5fmsgs_2eLaserScan_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_proto_5fmsgs_2eLaserScan_2eproto

// ===================================================================

class LaserScan : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto_msg.LaserScan) */ {
 public:
  LaserScan();
  virtual ~LaserScan();

  LaserScan(const LaserScan& from);

  inline LaserScan& operator=(const LaserScan& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaserScan(LaserScan&& from) noexcept
    : LaserScan() {
    *this = ::std::move(from);
  }

  inline LaserScan& operator=(LaserScan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaserScan& default_instance();

  static inline const LaserScan* internal_default_instance() {
    return reinterpret_cast<const LaserScan*>(
               &_LaserScan_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LaserScan* other);
  friend void swap(LaserScan& a, LaserScan& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaserScan* New() const PROTOBUF_FINAL { return New(NULL); }

  LaserScan* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LaserScan& from);
  void MergeFrom(const LaserScan& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LaserScan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double ranges = 11;
  int ranges_size() const;
  void clear_ranges();
  static const int kRangesFieldNumber = 11;
  double ranges(int index) const;
  void set_ranges(int index, double value);
  void add_ranges(double value);
  const ::google::protobuf::RepeatedField< double >&
      ranges() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_ranges();

  // repeated double intensitys = 12;
  int intensitys_size() const;
  void clear_intensitys();
  static const int kIntensitysFieldNumber = 12;
  double intensitys(int index) const;
  void set_intensitys(int index, double value);
  void add_intensitys(double value);
  const ::google::protobuf::RepeatedField< double >&
      intensitys() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_intensitys();

  // required string protocol_type = 1;
  bool has_protocol_type() const;
  void clear_protocol_type();
  static const int kProtocolTypeFieldNumber = 1;
  const ::std::string& protocol_type() const;
  void set_protocol_type(const ::std::string& value);
  #if LANG_CXX11
  void set_protocol_type(::std::string&& value);
  #endif
  void set_protocol_type(const char* value);
  void set_protocol_type(const char* value, size_t size);
  ::std::string* mutable_protocol_type();
  ::std::string* release_protocol_type();
  void set_allocated_protocol_type(::std::string* protocol_type);

  // required string frame_id = 3;
  bool has_frame_id() const;
  void clear_frame_id();
  static const int kFrameIdFieldNumber = 3;
  const ::std::string& frame_id() const;
  void set_frame_id(const ::std::string& value);
  #if LANG_CXX11
  void set_frame_id(::std::string&& value);
  #endif
  void set_frame_id(const char* value);
  void set_frame_id(const char* value, size_t size);
  ::std::string* mutable_frame_id();
  ::std::string* release_frame_id();
  void set_allocated_frame_id(::std::string* frame_id);

  // required double publish_stamp = 2;
  bool has_publish_stamp() const;
  void clear_publish_stamp();
  static const int kPublishStampFieldNumber = 2;
  double publish_stamp() const;
  void set_publish_stamp(double value);

  // required float angle_min = 4;
  bool has_angle_min() const;
  void clear_angle_min();
  static const int kAngleMinFieldNumber = 4;
  float angle_min() const;
  void set_angle_min(float value);

  // required float angle_max = 5;
  bool has_angle_max() const;
  void clear_angle_max();
  static const int kAngleMaxFieldNumber = 5;
  float angle_max() const;
  void set_angle_max(float value);

  // required float angle_increment = 6;
  bool has_angle_increment() const;
  void clear_angle_increment();
  static const int kAngleIncrementFieldNumber = 6;
  float angle_increment() const;
  void set_angle_increment(float value);

  // required float time_increment = 7;
  bool has_time_increment() const;
  void clear_time_increment();
  static const int kTimeIncrementFieldNumber = 7;
  float time_increment() const;
  void set_time_increment(float value);

  // required float scan_time = 8;
  bool has_scan_time() const;
  void clear_scan_time();
  static const int kScanTimeFieldNumber = 8;
  float scan_time() const;
  void set_scan_time(float value);

  // required float range_min = 9;
  bool has_range_min() const;
  void clear_range_min();
  static const int kRangeMinFieldNumber = 9;
  float range_min() const;
  void set_range_min(float value);

  // required float range_max = 10;
  bool has_range_max() const;
  void clear_range_max();
  static const int kRangeMaxFieldNumber = 10;
  float range_max() const;
  void set_range_max(float value);

  // @@protoc_insertion_point(class_scope:proto_msg.LaserScan)
 private:
  void set_has_protocol_type();
  void clear_has_protocol_type();
  void set_has_publish_stamp();
  void clear_has_publish_stamp();
  void set_has_frame_id();
  void clear_has_frame_id();
  void set_has_angle_min();
  void clear_has_angle_min();
  void set_has_angle_max();
  void clear_has_angle_max();
  void set_has_angle_increment();
  void clear_has_angle_increment();
  void set_has_time_increment();
  void clear_has_time_increment();
  void set_has_scan_time();
  void clear_has_scan_time();
  void set_has_range_min();
  void clear_has_range_min();
  void set_has_range_max();
  void clear_has_range_max();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > ranges_;
  ::google::protobuf::RepeatedField< double > intensitys_;
  ::google::protobuf::internal::ArenaStringPtr protocol_type_;
  ::google::protobuf::internal::ArenaStringPtr frame_id_;
  double publish_stamp_;
  float angle_min_;
  float angle_max_;
  float angle_increment_;
  float time_increment_;
  float scan_time_;
  float range_min_;
  float range_max_;
  friend struct protobuf_proto_5fmsgs_2eLaserScan_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LaserScan

// required string protocol_type = 1;
inline bool LaserScan::has_protocol_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaserScan::set_has_protocol_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaserScan::clear_has_protocol_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaserScan::clear_protocol_type() {
  protocol_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_protocol_type();
}
inline const ::std::string& LaserScan::protocol_type() const {
  // @@protoc_insertion_point(field_get:proto_msg.LaserScan.protocol_type)
  return protocol_type_.GetNoArena();
}
inline void LaserScan::set_protocol_type(const ::std::string& value) {
  set_has_protocol_type();
  protocol_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_msg.LaserScan.protocol_type)
}
#if LANG_CXX11
inline void LaserScan::set_protocol_type(::std::string&& value) {
  set_has_protocol_type();
  protocol_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_msg.LaserScan.protocol_type)
}
#endif
inline void LaserScan::set_protocol_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_protocol_type();
  protocol_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_msg.LaserScan.protocol_type)
}
inline void LaserScan::set_protocol_type(const char* value, size_t size) {
  set_has_protocol_type();
  protocol_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_msg.LaserScan.protocol_type)
}
inline ::std::string* LaserScan::mutable_protocol_type() {
  set_has_protocol_type();
  // @@protoc_insertion_point(field_mutable:proto_msg.LaserScan.protocol_type)
  return protocol_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaserScan::release_protocol_type() {
  // @@protoc_insertion_point(field_release:proto_msg.LaserScan.protocol_type)
  clear_has_protocol_type();
  return protocol_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaserScan::set_allocated_protocol_type(::std::string* protocol_type) {
  if (protocol_type != NULL) {
    set_has_protocol_type();
  } else {
    clear_has_protocol_type();
  }
  protocol_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol_type);
  // @@protoc_insertion_point(field_set_allocated:proto_msg.LaserScan.protocol_type)
}

// required double publish_stamp = 2;
inline bool LaserScan::has_publish_stamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaserScan::set_has_publish_stamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LaserScan::clear_has_publish_stamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LaserScan::clear_publish_stamp() {
  publish_stamp_ = 0;
  clear_has_publish_stamp();
}
inline double LaserScan::publish_stamp() const {
  // @@protoc_insertion_point(field_get:proto_msg.LaserScan.publish_stamp)
  return publish_stamp_;
}
inline void LaserScan::set_publish_stamp(double value) {
  set_has_publish_stamp();
  publish_stamp_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.LaserScan.publish_stamp)
}

// required string frame_id = 3;
inline bool LaserScan::has_frame_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaserScan::set_has_frame_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaserScan::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LaserScan::clear_frame_id() {
  frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_frame_id();
}
inline const ::std::string& LaserScan::frame_id() const {
  // @@protoc_insertion_point(field_get:proto_msg.LaserScan.frame_id)
  return frame_id_.GetNoArena();
}
inline void LaserScan::set_frame_id(const ::std::string& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_msg.LaserScan.frame_id)
}
#if LANG_CXX11
inline void LaserScan::set_frame_id(::std::string&& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_msg.LaserScan.frame_id)
}
#endif
inline void LaserScan::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_msg.LaserScan.frame_id)
}
inline void LaserScan::set_frame_id(const char* value, size_t size) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_msg.LaserScan.frame_id)
}
inline ::std::string* LaserScan::mutable_frame_id() {
  set_has_frame_id();
  // @@protoc_insertion_point(field_mutable:proto_msg.LaserScan.frame_id)
  return frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaserScan::release_frame_id() {
  // @@protoc_insertion_point(field_release:proto_msg.LaserScan.frame_id)
  clear_has_frame_id();
  return frame_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaserScan::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id != NULL) {
    set_has_frame_id();
  } else {
    clear_has_frame_id();
  }
  frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_id);
  // @@protoc_insertion_point(field_set_allocated:proto_msg.LaserScan.frame_id)
}

// required float angle_min = 4;
inline bool LaserScan::has_angle_min() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LaserScan::set_has_angle_min() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LaserScan::clear_has_angle_min() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LaserScan::clear_angle_min() {
  angle_min_ = 0;
  clear_has_angle_min();
}
inline float LaserScan::angle_min() const {
  // @@protoc_insertion_point(field_get:proto_msg.LaserScan.angle_min)
  return angle_min_;
}
inline void LaserScan::set_angle_min(float value) {
  set_has_angle_min();
  angle_min_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.LaserScan.angle_min)
}

// required float angle_max = 5;
inline bool LaserScan::has_angle_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LaserScan::set_has_angle_max() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LaserScan::clear_has_angle_max() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LaserScan::clear_angle_max() {
  angle_max_ = 0;
  clear_has_angle_max();
}
inline float LaserScan::angle_max() const {
  // @@protoc_insertion_point(field_get:proto_msg.LaserScan.angle_max)
  return angle_max_;
}
inline void LaserScan::set_angle_max(float value) {
  set_has_angle_max();
  angle_max_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.LaserScan.angle_max)
}

// required float angle_increment = 6;
inline bool LaserScan::has_angle_increment() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LaserScan::set_has_angle_increment() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LaserScan::clear_has_angle_increment() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LaserScan::clear_angle_increment() {
  angle_increment_ = 0;
  clear_has_angle_increment();
}
inline float LaserScan::angle_increment() const {
  // @@protoc_insertion_point(field_get:proto_msg.LaserScan.angle_increment)
  return angle_increment_;
}
inline void LaserScan::set_angle_increment(float value) {
  set_has_angle_increment();
  angle_increment_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.LaserScan.angle_increment)
}

// required float time_increment = 7;
inline bool LaserScan::has_time_increment() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LaserScan::set_has_time_increment() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LaserScan::clear_has_time_increment() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LaserScan::clear_time_increment() {
  time_increment_ = 0;
  clear_has_time_increment();
}
inline float LaserScan::time_increment() const {
  // @@protoc_insertion_point(field_get:proto_msg.LaserScan.time_increment)
  return time_increment_;
}
inline void LaserScan::set_time_increment(float value) {
  set_has_time_increment();
  time_increment_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.LaserScan.time_increment)
}

// required float scan_time = 8;
inline bool LaserScan::has_scan_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LaserScan::set_has_scan_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LaserScan::clear_has_scan_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LaserScan::clear_scan_time() {
  scan_time_ = 0;
  clear_has_scan_time();
}
inline float LaserScan::scan_time() const {
  // @@protoc_insertion_point(field_get:proto_msg.LaserScan.scan_time)
  return scan_time_;
}
inline void LaserScan::set_scan_time(float value) {
  set_has_scan_time();
  scan_time_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.LaserScan.scan_time)
}

// required float range_min = 9;
inline bool LaserScan::has_range_min() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LaserScan::set_has_range_min() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LaserScan::clear_has_range_min() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LaserScan::clear_range_min() {
  range_min_ = 0;
  clear_has_range_min();
}
inline float LaserScan::range_min() const {
  // @@protoc_insertion_point(field_get:proto_msg.LaserScan.range_min)
  return range_min_;
}
inline void LaserScan::set_range_min(float value) {
  set_has_range_min();
  range_min_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.LaserScan.range_min)
}

// required float range_max = 10;
inline bool LaserScan::has_range_max() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LaserScan::set_has_range_max() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LaserScan::clear_has_range_max() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LaserScan::clear_range_max() {
  range_max_ = 0;
  clear_has_range_max();
}
inline float LaserScan::range_max() const {
  // @@protoc_insertion_point(field_get:proto_msg.LaserScan.range_max)
  return range_max_;
}
inline void LaserScan::set_range_max(float value) {
  set_has_range_max();
  range_max_ = value;
  // @@protoc_insertion_point(field_set:proto_msg.LaserScan.range_max)
}

// repeated double ranges = 11;
inline int LaserScan::ranges_size() const {
  return ranges_.size();
}
inline void LaserScan::clear_ranges() {
  ranges_.Clear();
}
inline double LaserScan::ranges(int index) const {
  // @@protoc_insertion_point(field_get:proto_msg.LaserScan.ranges)
  return ranges_.Get(index);
}
inline void LaserScan::set_ranges(int index, double value) {
  ranges_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_msg.LaserScan.ranges)
}
inline void LaserScan::add_ranges(double value) {
  ranges_.Add(value);
  // @@protoc_insertion_point(field_add:proto_msg.LaserScan.ranges)
}
inline const ::google::protobuf::RepeatedField< double >&
LaserScan::ranges() const {
  // @@protoc_insertion_point(field_list:proto_msg.LaserScan.ranges)
  return ranges_;
}
inline ::google::protobuf::RepeatedField< double >*
LaserScan::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:proto_msg.LaserScan.ranges)
  return &ranges_;
}

// repeated double intensitys = 12;
inline int LaserScan::intensitys_size() const {
  return intensitys_.size();
}
inline void LaserScan::clear_intensitys() {
  intensitys_.Clear();
}
inline double LaserScan::intensitys(int index) const {
  // @@protoc_insertion_point(field_get:proto_msg.LaserScan.intensitys)
  return intensitys_.Get(index);
}
inline void LaserScan::set_intensitys(int index, double value) {
  intensitys_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_msg.LaserScan.intensitys)
}
inline void LaserScan::add_intensitys(double value) {
  intensitys_.Add(value);
  // @@protoc_insertion_point(field_add:proto_msg.LaserScan.intensitys)
}
inline const ::google::protobuf::RepeatedField< double >&
LaserScan::intensitys() const {
  // @@protoc_insertion_point(field_list:proto_msg.LaserScan.intensitys)
  return intensitys_;
}
inline ::google::protobuf::RepeatedField< double >*
LaserScan::mutable_intensitys() {
  // @@protoc_insertion_point(field_mutable_list:proto_msg.LaserScan.intensitys)
  return &intensitys_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace proto_msg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_5fmsgs_2eLaserScan_2eproto__INCLUDED
